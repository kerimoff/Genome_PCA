/*
 * -------------------------------------------------
 *  kerimoff/genome_PCA Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {
  container = 'kerimoff/genotype_pca:latest' // Container slug. Stable releases should specify release tag!

  outdir = "$baseDir/results/"
  // Pipeline Options
  name = false
  project = false
  tracedir = "${params.outdir}/pipeline_info"
  num_pc = 5

  // flag if remove samples before mapping
  exclude_population = true
  
  // Reference 1000Genome dataset VCF
  main_vcf = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/GRCh38_renamed_ids_no_multiallelic.vcf.gz"
  
  // file with populations of reference VCF
  populations_file = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/igsr_samples.tsv"

  // file with samples (americans) to remove (from reference VCF) for pca mapping
  ids_to_remove_file = "/gpfs/hpc/home/kerimov/1000G_genome/source_data/amrs.txt"
}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  tartu_hpc {
    includeConfig 'conf/base.config'
    includeConfig 'conf/tartu_hpc.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/nfcore-rnaseq_DAG.svg"
}

manifest {
  name = 'kerimoff/genotype_pca'
  description = 'Nextflow RNA-Seq analysis pipeline, part of the nf-core community.'
  homePage = 'https://github.com/nf-core/rnaseq'
  author = 'Nurlan Kerimov'
  version = '1.2'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
